Assignment_4.sovlerAI = (function() {
    'use strict';

    //Roughly following AI implementation from:
    //https://codemyroad.wordpress.com/2013/04/14/tetris-ai-the-near-perfect-player/

    //We want these values:
    //  Height: LOW
    //  Holes: LOW
    //  Smoothness: LOW
    //  LinesCleared: HIGH


    function aiJarvis() {
        
        var that = {
            nextBlock: {},
            moves: [],
            testGrid: [],
            curGrid: [],
            moveChosen: false
        },
            i = 0,
            j = 0

        //Make array of moves (40 different moves in total)
        //for (i = 0; i < 40; i++) {
        //    that.moves[i] = { height: undefined, holes: undefined, smooth: undefined, lines: undefined };
        //}

        //Make empty grids
        for (i = 0; i < 22; i++) {
            that.testGrid.push([]);
            for (j = 0; j < 10; j++) {
                that.testGrid[i].push(undefined);
            }
        }

        for (i = 0; i < 22; i++) {
            that.curGrid.push([]);
            for (j = 0; j < 10; j++) {
                that.curGrid[i].push(undefined);
            }
        }

        //Sets AI grid to game Grid
        that.createGrid = function(gameGrid, aiGrid){
            for(i = 0; i < 22; i++){
                for(j = 0; j<10; j++){
                    if(gameGrid[i][j] == undefined){
                        aiGrid[i][j] = undefined;   
                    }
                    else {
                        aiGrid[i][j] = 1;
                    }
                }
            }
        };

        //Sets total height and smoothness of current grid after tried move
        that.solveHeightSmooth = function () {
            var i = 0,
                j = 0,
                sumH = 0,
                sumC = 0,
                sumS = 0,
                cols = [0,0,0,0,0,0,0,0,0,0]

            for(j = 0; j < 10; j++){
                for(i = 0; i < 22; i++){
                    if(that.testGrid[i][j] != undefined){
                        sumC++;
                    }
                }
                cols[j] = sumC;
                sumH += sumC;
                sumC = 0;
            }

            //Find smoothness factor
            for(i = 0; i<9; i++){
                sumS += Math.abs(cols[i]-cols[i+1]);
            }

            that.moves[that.moves.length - 1].smooth = sumS; 
            that.moves[that.moves.length - 1].height = sumH;
        };

        //Sets total # of holes in current grid after tried move
        that.solveHoles = function () {
            var i = 0,
                j = 0,
                sumH = 0

            //Find Holes
            for(i = 1; i < 22; i++){
                for(j = 0; j < 10; j++){
                    if(that.testGrid[i][j] == undefined){
                        if(that.testGrid[i-1][j] != undefined){
                            if (j === 0 || j === 9) {
                                sumH += 2;
                            }
                            else {
                                sumH++;
                            }
                            
                        }
                    }
                }
            }

            that.moves[that.moves.length - 1].holes = sumH;
        };

        //Sets total # of lines cleared after tried move
        that.solveLinesCleared = function () {
            var i = 0,
                j = 0,
                sumL = 0,
                emptyF = true

            //Find Holes
            for(i = 0; i < 22; i++){
                for (j = 0; j < 10; j++){
                    if(that.testGrid[i][j] == undefined){
                        emptyF = false;
                    }
                }
                if(emptyF == true){
                    sumL++;
                }
                emptyF = true;
            }

            that.moves[that.moves.length - 1].lines = sumL;
        };

        //Compares two moves' parameters to see which is better
        that.compareMoves = function () {

            var heightVar = -0.60,
                holeVar = -0.45,
                smoothVar = -0.30,
                lineVar = 1;

            //0.66569 , 0.99275 , 0.46544 , 0.24077

            while (that.moveChosen == false) {

                //Calculate Scores
                //SCORE HEIGHT
                that.moves[0].score += (that.moves[0].height) * heightVar;
                that.moves[1].score += (that.moves[1].height) * heightVar;

                //SCORE HOLES
                that.moves[0].score += (that.moves[0].holes) * holeVar;
                that.moves[1].score += (that.moves[1].holes) * holeVar;

                //SCORE SMOOTH
                that.moves[0].score += (that.moves[0].smooth) * smoothVar;
                that.moves[1].score += (that.moves[1].smooth) * smoothVar;

                //SCORE LINES
                that.moves[0].score += (that.moves[0].lines) * lineVar;
                that.moves[1].score += (that.moves[1].lines) * lineVar;

                //Compare Scores
                if (that.moves[0].score >= that.moves[1].score) {
                    that.moves.splice(1, 1);
                }
                else {
                    that.moves.splice(0, 1);
                }

                that.moves[0].score = 0;

                //Check to see if best move has been chosen
                if (that.moves.length === 1) {
                    that.moveChosen = true;
                }
            }
        };

        that.scoreGrid = function (gameGrid) {
            that.createGrid(gameGrid, that.testGrid);

            that.moves.push({ height: undefined, holes: undefined, smooth: undefined, lines: undefined, score: 0, move: [] });

            that.solveHeightSmooth();
            that.solveHoles();
            that.solveLinesCleared();

        };

        that.update = function () {

        };

        that.render = function (context) {
            //context.save();

            //context.restore();

        };

        return that;

    }

    return {

        aiJarvis: aiJarvis

    };

}());
